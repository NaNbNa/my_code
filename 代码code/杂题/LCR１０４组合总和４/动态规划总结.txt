--本题目是排列组合问题--为什么排列组合可以用动态规划？动态规划到底是什么？
——动态规划（Dynamic Programming，DP）是运筹学的一个分支，是求解决策过程最优化的过程
1.在现实生活中，有一类活动的过程，由于它的特殊性，可将过程分成若干个互相联系的阶段，在它的每一阶段都需要作出决策，从而使整个过程达到最好的活动效果.
2.因此各个阶段决策的选取不能任意确定，它依赖于当前面临的状态，又影响以后的发展.
3.当各个阶段决策确定后，就组成一个决策序列，因而也就确定了整个过程的一条活动路线．
4.这种把一个问题看作是一个前后关联具有链状结构的多阶段过程就称为多阶段决策过程，这种问题称为多阶段决策问题.
——基本思想
1动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。
2每一个解都对应于一个值，我们希望找到具有最优值的解。
3动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。
4与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。
5若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。
6如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。
7我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。
8这就是动态规划法的基本思路
——应用到题目：
1.排列规划问题，是为了找到合适的取数顺序，取一个数，就是取哪个数，代表一个决策，而你取这个数是不会独立的，与上一次取的数有关---这就是多决策问题
2.多决策问题的解决关键--存储之前的决策结果，拿来给下一次使用
3.所以，我们需要划分子问题，求出子问题，利用子问题来求下一个子问题（与迭代的有些差别）
————————————————————————————————————————————————————————————————————————
代码知识点:
1.
vector<int> dp(n+1):
	在声明 vector<int> dp(n+1) 后，dp 中的值最初会被初始化为整数类型的默认值，对于 int 类型通常是0--但这是通常
	应该使用更加易懂的代码：
vector<int> dp(n+1, 0); // 初始化 dp 向量为全0
2.
dp[i - num] < INT_MAX - dp[i]：要注意排列组合不要越界
