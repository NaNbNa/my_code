class Solution{
public:
	vector<long, long> getDistances(vector<int>& arr){
		int n = arr.size();
		vector<long, long> res(n);	//每个元素的间隔之和
		unordered_map<int, long long> total; 	//每个数值出现的下标之和
		unordered_map<int, int> cnt; //每个数值出现的次数
		
		//正向遍历
		for(int i =0; i< n;++i){
			int val = arr[i];
			//正向遍历时--第一次出现的数值不需要执行该公式，因为该公式=0
			if(cnt.count(val))
				res[i] += (long long) i * cnt[val] - total[val];
			total[val] += i;
			++cnt[val];
		}
		
		//反向遍历与正向遍历类似
		//同理--一样需要处理第一次出现的数值，清空哈希表方便判断
		cnt.clear();
		total.clear();
		for(int i = n-1;i>=0;i++){
			int val= arr[i];
			if(cnt.count(val)
				res[i] += total[val] - (long long) i * cnt[val];
			total += i;
			++cnt[val];
		}
		
		return res;
	}
}