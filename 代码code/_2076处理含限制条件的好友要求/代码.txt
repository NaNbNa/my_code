//并查集
class UnionFind{
public:
	//存储父亲节点--第i个坐标的父亲节点是parent[i]
	vector<int> parent;
	vector<int> size;
	//数据数量
	int n;
	//连通分量数量
	int setCount;

public:
	//构造函数
	//int _n: 这是构造函数的参数，表示并查集的元素数量--同理--n(_n): 这是成员初始化列表的一部分，它将参数 _n 赋值给 n，用于存储并查集的元素数量。
	UnionFind(int _n): n(_ n), setCount(_n), parent(_n), size(_n, 1){
		//iota函数是将起始值 0 赋给范围内的每个元素，并逐步递增，直到达到范围的结束位置
		//在代码中，iota 会从 parent 向量的起始位置开始，为每个元素分配连续的整数值，从 0 开始递增，直到 parent 向量的末尾位置
		iota(parent.begin(), parent.end(), 0);
	}
	//提取出x节点所在子树的根节点，以此来判断多个节点是否属于同一子集
	int findset(int x){	
		return parent[x] == x? x : parent[x] = findset(parent[x]);
	}
	//合并操作--合并树的操作需要学习
	bool unite(int x, int y){	
		x = findset(x);
		y = findset(y);
		//属于同一个子集
		if(x == y)
			return false;
		//合并操作开始
		//优先取节点多的树
		if(size[x] < size[y])
			swap(x, y);
		//合并就直接接上根节点
		parent[y] = x;
		//合并后大小相加
		size[x] += size[y];
		//连通分量-1
		--setCount;
		return true;
	}
	//判断是否是同一连通子集
	bool connected(int x, int y){
		x = findset(x);
		y = findset(y);
		return x==y;	
	}
};

class Solution{
	vector<bool> friendRequests(int n, vector<vector<int>>&  restrictions, vector<vector<int>> requests){
		//初始化并查集
		UnionFind uf(n);
		vector<bool> ans;
		//遍历请求好友的数组
		for(const auto& req: requests){
			int x = uf.findset(req[0], y = uf.findset(req[1]);
			//不连通
			if(x != y){
				bool check = true;
				//遍历限制请求的数组
				for(const auto& res: restrictions){
					//找出限制节点的所在子集
					int u = uf.findset(res[0]), v = uf.findset(res[1]);
					//满足限制条件--请求失败
					if((x == u) && (y == v) || (x == v && y == u){
						check = false;
						break;
					}
				}
				//根据结果构造答案
				if(check){
					ans.push_back(true);
					//合并
					uf.unite(x, y);
				}else
					ans.push_back(false);
			}else
				ans.push_back(true);
		}
		return ans;
	}	
}
