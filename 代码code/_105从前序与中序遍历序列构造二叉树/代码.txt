/**
 * Definition for a binary tree node.树节点的定义
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
//全局哈希映射，方便定位根节点
private:
	unorder_map<int,int> index;

public:
	TreeNode* myBuildTree(const vector<int> & preorder, const vector<int>& inorder,int preorder_left, int preorder_right, int inorder_left,int inorder_right){
		//递归终止条件
		if(preorder_left >preorder_right){
			return nullptr;
		}
		
		int preorder_root = preorder_left;
		//快速定位根节点
		int inorder_root = index[preorder[preorder_root]];
		//建立并确定根节点
		TreeNode* root = new TreeNode(preoder[preorder_root];
		//左子树的范围
		int size_left_subtree = inorder_root - inorder_left;
		//左子树连接到根节点
		root->left = mybuildTree(preorder,inorder,preorder+1,preorder_left+size_left_subtree, inorder_left ,inorder_root-1);
		//右子树连接到根节点
		root ->right = mybuildTree(preorder,inorder,preorder+size_left_subtree+1, preorder_right,inorder_root+1,inorder_right);
		//返回根节点
		return root;
	}
	TreeNode* buildTree(vector<int>& preorder,vector<int>& inorder) {
		int n = preorder.size();
		//根据哈希映射，帮助我们快速定位根节点
		//key = inorder[i]; value = i
		for(int i =0; i <n; ++i)
			index[inorder[i]] =i;
		return mybuildTree(preorder,inorder,0,n-1,0,n-1)；
	}
}