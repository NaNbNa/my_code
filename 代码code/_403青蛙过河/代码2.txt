class   Solution{
	public boolean canCross(int[] stones){
		int n =stones.length;
		//答案存储,初始化全为false
		boolean[][] dp = new boolean[n][n];
		//更换初始
		dp[0][0] = true;
		//优化时间复杂度
		for(int i = 1;i<n;i++){
			if(stones[i] - stones[i-1] >i)
				return false;
}
		//寻找是否存在可行解
		for(int i = 1;i<n;i++){
			//题目理解：不一定是一个接一个石头跳过来
			// 为了寻找当前石头是否可以从后方某一石头调过来
			for(int j = i-1;j>=0;j--){
				//距离
				int k = stones[i] - stones[j];
				//优化，当出现这种情况直接退出循环，不进行修改数组的操作
				if(k>j+1)
					break; 
				//修改boolean数组
				dp[i][k] = dp[j][k-1] || dp[j][k] || dp[j][k+1];

				//判断是否可以跳到最后一个石头
				if(i==n-1&&dp[i][k]){
					return true;
}
}		
}
		//不可以跳到最后一个石头
		return false；
 }